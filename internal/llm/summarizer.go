package llm

import (
	"github.com/doorcloud/door-ai-dockerise/internal/facts"
)

// ApplicationSpec represents the complete specification of an application
// as generated by the LLM summarizer
type ApplicationSpec struct {
	// Application identity
	Name        string `json:"name"`
	Description string `json:"description"`
	Type        string `json:"type"` // e.g., "web", "api", "worker"

	// Runtime configuration
	Runtime struct {
		BaseImage   string            `json:"base_image"`
		Ports       []int             `json:"ports"`
		Environment map[string]string `json:"environment"`
		HealthCheck string            `json:"health_check"`
		Command     []string          `json:"command"`
		Args        []string          `json:"args"`
	} `json:"runtime"`

	// Build configuration
	Build struct {
		Context    string            `json:"context"`
		Dockerfile string            `json:"dockerfile"`
		Target     string            `json:"target"`
		Args       map[string]string `json:"args"`
	} `json:"build"`

	// Dependencies
	Dependencies []string `json:"dependencies"`

	// Additional metadata
	Metadata map[string]interface{} `json:"metadata"`
}

// Summarizer interface for generating ApplicationSpec from Facts
type Summarizer interface {
	Summarize(facts facts.Facts) (ApplicationSpec, error)
}

// NewApplicationSpec creates a new ApplicationSpec with default values
func NewApplicationSpec() ApplicationSpec {
	spec := ApplicationSpec{
		Runtime: struct {
			BaseImage   string            `json:"base_image"`
			Ports       []int             `json:"ports"`
			Environment map[string]string `json:"environment"`
			HealthCheck string            `json:"health_check"`
			Command     []string          `json:"command"`
			Args        []string          `json:"args"`
		}{
			Environment: make(map[string]string),
		},
		Build: struct {
			Context    string            `json:"context"`
			Dockerfile string            `json:"dockerfile"`
			Target     string            `json:"target"`
			Args       map[string]string `json:"args"`
		}{
			Args: make(map[string]string),
		},
		Metadata: make(map[string]interface{}),
	}
	return spec
}
